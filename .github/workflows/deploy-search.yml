name: deploy-search

on:
  workflow_dispatch:
  push:
    branches: ["main"]
#    paths:
#      - 'aspnetapp/**'

env:
  REGISTRY_IMAGE: egorksv/busybox
  DOCKERFILE: Dockerfile
  DEPLOYMENT_NAME: testdev
  DEPLOY_NAMESPACE: guvusocial-prod
  AWS_REGION: us-east-1

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::767398139813:role/default-guvubots-eks-github-role
          role-session-name: docker-actions-build-${{ github.head_ref || github.ref_name }}-${{ github.run_number }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Print current caller identity
        run: |
          aws sts get-caller-identity    

      - name: Set up EKS Credentials
        run: |
          echo "EKS_CERTIFICATE=$(aws eks describe-cluster --name ${{ secrets.EKS_CLUSTER }} | jq -r .cluster.certificateAuthority.data)" >> $GITHUB_ENV
          echo "EKS_TOKEN=$(aws eks get-token --cluster-name ${{ secrets.EKS_CLUSTER }} | jq -r .status.token)" >> $GITHUB_ENV
          echo "EKS_HOST=$(aws eks describe-cluster --name ${{ secrets.EKS_CLUSTER }} | jq -r .cluster.endpoint  | sed -E 's/^\s*.*:\/\///g')" >> $GITHUB_ENV

      - name: Validate EKS Access
        uses: actions-hub/kubectl@master
        env:
          KUBE_HOST: ${{ env.EKS_HOST }}
          KUBE_CERTIFICATE: ${{ env.EKS_CERTIFICATE }}
          KUBE_TOKEN: ${{ env.EKS_TOKEN }}
        with:
          args: get ns

      - uses: docker/setup-buildx-action@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.REGISTRY_IMAGE }}
          # generate Docker tags based on the following events/attributes
          #     pattern: '^release\.(?P<branchname>.*)-(?P<buildnumber>\d+)\.(?P<githash>.*)\.(?P<timestamp>\d+)'
          tags: |
            type=ref,enable=true,prefix=release.,suffix=-${{ github.run_number }}.{{sha}}.{{date 'YYYYMMDDHHmmss'}},event=branch
            type=raw,value=latest,enable=true

      - name: Extract FluxCD Image Release Tag
        run: |
          echo "FLUXCD_IMAGE_TAG=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version']}}"
          echo "FLUXCD_IMAGE_TAG=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}" >> $GITHUB_ENV

      - name: DEBUG
        run: |
          echo XXXX wait -n ${{env.DEPLOY_NAMESPACE}} --for=jsonpath='{.metadata.annotations.metadata\.weave\.works/build-version}'="${{env.FLUXCD_IMAGE_TAG}}" helmrelease/${{ env.DEPLOYMENT_NAME }} --timeout=300s


      - name: XXXX Ensure Helm Release has been updated with the new version
        uses: actions-hub/kubectl@master
        env:
          KUBE_HOST: ${{ env.EKS_HOST }}
          KUBE_CERTIFICATE: ${{ env.EKS_CERTIFICATE }}
          KUBE_TOKEN: ${{ env.EKS_TOKEN }}
        with:
          #        args: wait -n ${{env.DEPLOY_NAMESPACE}} --for=jsonpath=\'{.metadata.annotations.metadata\\.weave\\.works/build-version}\'="${{env.FLUXCD_IMAGE_TAG}}" helmrelease/${{ env.DEPLOYMENT_NAME }} --timeout=300s
          args: get -n ${{env.DEPLOY_NAMESPACE}} helmrelease/${{ env.DEPLOYMENT_NAME }} -o=jsonpath={.metadata.annotations.metadata\.weave\.works/build-version}

      - name: Login to docker hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push the Docker image
        uses: docker/build-push-action@v3
        with:
          context: "{{defaultContext}}"
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: curl
        uses: enflo/curl-action@master
        with:
          curl: ${{ secrets.FLUXCD_WEBHOOK }}

      - name: DEBUG
        run: |
          echo XXXX wait -n ${{env.DEPLOY_NAMESPACE}} --for=jsonpath='{.metadata.annotations.metadata\.weave\.works/build-version}'="${{env.FLUXCD_IMAGE_TAG}}" helmrelease/${{ env.DEPLOYMENT_NAME }} --timeout=300s


      - name: Ensure Helm Release has been updated with the new version
        uses: actions-hub/kubectl@master
        env:
          KUBE_HOST: ${{ env.EKS_HOST }}
          KUBE_CERTIFICATE: ${{ env.EKS_CERTIFICATE }}
          KUBE_TOKEN: ${{ env.EKS_TOKEN }}
        with:
          args: wait -n ${{env.DEPLOY_NAMESPACE}} --for=jsonpath='{.metadata.annotations.metadata\\.weave\\.works/build-version}'="${{env.FLUXCD_IMAGE_TAG}}" helmrelease/${{ env.DEPLOYMENT_NAME }} --timeout=300s


      - name: Ensure Helm Release deployment is ready
        uses: actions-hub/kubectl@master
        env:
          KUBE_HOST: ${{ env.EKS_HOST }}
          KUBE_CERTIFICATE: ${{ env.EKS_CERTIFICATE }}
          KUBE_TOKEN: ${{ env.EKS_TOKEN }}
        with:
          args: wait -n ${{env.DEPLOY_NAMESPACE}} -for=condition=ready helmrelease/${{ env.DEPLOYMENT_NAME }} --timeout=300s
#
